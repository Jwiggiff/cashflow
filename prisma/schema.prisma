// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  password      String
  email         String?   @unique
  name          String?

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  bankAccounts  BankAccount[]
  categories    Category[]
}

model BankAccount {
  id                    Int           @id @default(autoincrement())
  name                  String
  type                  AccountType
  balance               Float
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  createdAt             DateTime      @default(now()) @db.Timestamptz
  updatedAt             DateTime      @updatedAt @db.Timestamptz
  transactions          Transaction[]
  outgoingTransfers     Transfer[]    @relation("FromAccount")
  incomingTransfers     Transfer[]    @relation("ToAccount")
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  icon        String?       // Optional icon name from lucide-react
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime      @default(now()) @db.Timestamptz
  updatedAt   DateTime      @updatedAt @db.Timestamptz
  transactions Transaction[]
}

model Transaction {
  id          Int             @id @default(autoincrement())
  date        DateTime        @db.Timestamptz
  description String
  amount      Float
  type        TransactionType
  category    Category?       @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  account     BankAccount     @relation(fields: [accountId], references: [id])
  accountId   Int
  createdAt   DateTime        @default(now()) @db.Timestamptz
  updatedAt   DateTime        @updatedAt @db.Timestamptz
}

model Transfer {
  id                Int             @id @default(autoincrement())
  date              DateTime        @db.Timestamptz
  description       String?
  amount            Float
  fromAccount       BankAccount     @relation("FromAccount", fields: [fromAccountId], references: [id])
  fromAccountId     Int
  toAccount         BankAccount     @relation("ToAccount", fields: [toAccountId], references: [id])
  toAccountId       Int
  createdAt         DateTime        @default(now()) @db.Timestamptz
  updatedAt         DateTime        @updatedAt @db.Timestamptz
}

enum AccountType {
  CHECKING
  SAVINGS
  INVESTMENT
  CREDIT
}

enum TransactionType {
  INCOME
  EXPENSE
}
