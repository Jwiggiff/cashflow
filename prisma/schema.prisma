// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../data/cashflow.db"
}

// #region Auth Models

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  password     String
  email        String?       @unique
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bankAccounts BankAccount[]
  categories   Category[]

  pushSubscriptions PushSubscription[]
  accounts          Account[]
  sessions          Session[]
  Authenticator     Authenticator[]
}

model PushSubscription {
  id             Int       @id @default(autoincrement())
  endpoint       String    @unique
  expirationTime DateTime?
  auth           String
  p256dh         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// #endregion

model BankAccount {
  id                         Int                    @id @default(autoincrement())
  name                       String
  aliases                    AccountAlias[]
  type                       AccountType
  balance                    Float
  user                       User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     String
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  transactions               Transaction[]
  recurringTransactions      RecurringTransaction[]
  outgoingTransfers          Transfer[]             @relation("FromAccount")
  incomingTransfers          Transfer[]             @relation("ToAccount")
  outgoingRecurringTransfers RecurringTransfer[]    @relation("FromAccountRecurring")
  incomingRecurringTransfers RecurringTransfer[]    @relation("ToAccountRecurring")
}

model Category {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  icon                  String? // Optional icon name from lucide-react
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  transactions          Transaction[]
  recurringTransactions RecurringTransaction[]
}

model Transaction {
  id          Int             @id @default(autoincrement())
  date        DateTime
  description String
  amount      Float
  type        TransactionType
  source      String?
  category    Category?       @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  account     BankAccount     @relation(fields: [accountId], references: [id])
  accountId   Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model RecurringTransaction {
  id                Int             @id @default(autoincrement())
  description       String
  amount            Float
  type              TransactionType
  rrule             String
  startDate         DateTime
  lastProcessedDate DateTime?
  nextDueDate       DateTime
  isActive          Boolean         @default(true)
  category          Category?       @relation(fields: [categoryId], references: [id])
  categoryId        Int?
  account           BankAccount     @relation(fields: [accountId], references: [id])
  accountId         Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model RecurringTransfer {
  id                Int         @id @default(autoincrement())
  description       String?
  amount            Float
  rrule             String
  startDate         DateTime
  lastProcessedDate DateTime?
  nextDueDate       DateTime
  isActive          Boolean     @default(true)
  fromAccount       BankAccount @relation("FromAccountRecurring", fields: [fromAccountId], references: [id])
  fromAccountId     Int
  toAccount         BankAccount @relation("ToAccountRecurring", fields: [toAccountId], references: [id])
  toAccountId       Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Transfer {
  id            Int         @id @default(autoincrement())
  date          DateTime
  description   String?
  amount        Float
  fromAccount   BankAccount @relation("FromAccount", fields: [fromAccountId], references: [id])
  fromAccountId Int
  toAccount     BankAccount @relation("ToAccount", fields: [toAccountId], references: [id])
  toAccountId   Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model AccountAlias {
  id        Int         @id @default(autoincrement())
  name      String
  account   BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([name, accountId])
}

enum AccountType {
  CHECKING
  SAVINGS
  INVESTMENT
  CREDIT
}

enum TransactionType {
  INCOME
  EXPENSE
}
