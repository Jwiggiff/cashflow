// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../data/cashflow.db"
}

model User {
  id                String             @id @default(cuid())
  username          String             @unique
  password          String
  email             String?            @unique
  name              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bankAccounts      BankAccount[]
  categories        Category[]
  pushSubscriptions PushSubscription[]
}

model PushSubscription {
  id             Int       @id @default(autoincrement())
  endpoint       String    @unique
  expirationTime DateTime?
  auth           String
  p256dh         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model BankAccount {
  id                Int            @id @default(autoincrement())
  name              String
  aliases           AccountAlias[]
  type              AccountType
  balance           Float
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  transactions      Transaction[]
  outgoingTransfers Transfer[]     @relation("FromAccount")
  incomingTransfers Transfer[]     @relation("ToAccount")
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  icon         String? // Optional icon name from lucide-react
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Transaction {
  id          Int             @id @default(autoincrement())
  date        DateTime
  description String
  amount      Float
  type        TransactionType
  source      String?
  category    Category?       @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  account     BankAccount     @relation(fields: [accountId], references: [id])
  accountId   Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Transfer {
  id            Int         @id @default(autoincrement())
  date          DateTime
  description   String?
  amount        Float
  fromAccount   BankAccount @relation("FromAccount", fields: [fromAccountId], references: [id])
  fromAccountId Int
  toAccount     BankAccount @relation("ToAccount", fields: [toAccountId], references: [id])
  toAccountId   Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model AccountAlias {
  id        Int         @id @default(autoincrement())
  name      String
  account   BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([name, accountId])
}

enum AccountType {
  CHECKING
  SAVINGS
  INVESTMENT
  CREDIT
}

enum TransactionType {
  INCOME
  EXPENSE
}
